#----------------------------------- TEXTUAL-CONVENTION:  DisplayString  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: DisplayString
DisplayString ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"Represents textual information taken from the NVT ASCII
character set, as defined in pages 4, 10-11 of RFC 854.
To summarize RFC 854, the NVT ASCII repertoire specifies:
- the use of character codes 0-127 (decimal)
- the graphics characters (32-126) are interpreted as
US ASCII
- NUL, LF, CR, BEL, BS, HT, VT and FF have the special
meanings specified in RFC 854
- the other 25 codes have no standard interpretation
- the sequence 'CR LF' means newline
- the sequence 'CR NUL' means carriage-return
- an 'LF' not preceded by a 'CR' means moving to the
same column on the next line.
- the sequence 'CR x' for any x other than LF or NUL is
illegal.  (Note that this also means that a string may
end with either 'CR LF' or 'CR NUL', but not with CR.)
Any object defined using this syntax may not exceed 255
characters in length."
SYNTAX          OCTET STRING (SIZE(0..255))
PhysAddress ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1x:"
STATUS          current
DESCRIPTION     
"Represents media- or physical-level addresses."
SYNTAX          OCTET STRING
MacAddress ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1x:"
STATUS          current
DESCRIPTION     
"Represents an 802 MAC address represented in the
`canonical' order defined by IEEE 802.1a, i.e., as if it
were transmitted least significant bit first, even though
802.5 (in contrast to other 802.x protocols) requires MAC

#----------------------------------- TEXTUAL-CONVENTION:  TruthValue  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TruthValue
TruthValue ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents a boolean value."
SYNTAX          INTEGER { true(1), false(2) }
TestAndIncr ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents integer-valued information used for atomic
operations.  When the management protocol is used to specify
that an object instance having this syntax is to be
modified, the new value supplied via the management protocol
must precisely match the value presently held by the
instance.  If not, the management protocol set operation
fails with an error of `inconsistentValue'.  Otherwise, if
the current value is the maximum value of 2^31-1 (2147483647
decimal), then the value held by the instance is wrapped to

#----------------------------------- TEXTUAL-CONVENTION:  AutonomousType  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: AutonomousType
AutonomousType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents an independently extensible type identification
value.  It may, for example, indicate a particular sub-tree
with further MIB definitions, or define a particular type of
protocol or hardware."
SYNTAX          OBJECT IDENTIFIER
InstancePointer ::= TEXTUAL-CONVENTION
STATUS          obsolete
DESCRIPTION     
"A pointer to either a specific instance of a MIB object or
a conceptual row of a MIB table in the managed device.  In
the latter case, by convention, it is the name of the
particular instance of the first accessible columnar object
in the conceptual row.
The two uses of this textual convention are replaced by
VariablePointer and RowPointer, respectively."
SYNTAX          OBJECT IDENTIFIER
VariablePointer ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A pointer to a specific object instance.  For example,
sysContact.0 or ifInOctets.3."
SYNTAX          OBJECT IDENTIFIER
RowPointer ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents a pointer to a conceptual row.  The value is the
name of the instance of the first accessible columnar object
in the conceptual row.
For example, ifIndex.3 would point to the 3rd row in the
ifTable (note that if ifIndex were not-accessible, then
ifDescr.3 would be used instead)."

#----------------------------------- TEXTUAL-CONVENTION:  RowStatus  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: RowStatus
RowStatus ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"The RowStatus textual convention is used to manage the
creation and deletion of conceptual rows, and is used as the
value of the SYNTAX clause for the status column of a
conceptual row (as described in Section 7.7.1 of [2].)

#----------------------------------- TEXTUAL-CONVENTION:  TimeStamp  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TimeStamp
TimeStamp ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"The value of the sysUpTime object at which a specific
occurrence happened.  The specific occurrence must be
defined in the description of any object defined using this
type.
If sysUpTime is reset to zero as a result of a re-
initialization of the network management (sub)system, then
the values of all TimeStamp objects are also reset.
However, after approximately 497 days without a re-
initialization, the sysUpTime object will reach 2^^32-1 and
then increment around to zero; in this case, existing values
of TimeStamp objects do not change.  This can lead to
ambiguities in the value of TimeStamp objects."
SYNTAX          TimeTicks
TimeInterval ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A period of time, measured in units of 0.01 seconds."
SYNTAX          Integer32 (0..2147483647)

#----------------------------------- TEXTUAL-CONVENTION:  DateAndTime  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: DateAndTime
DateAndTime ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "2d-1d-1d,1d:1d:1d.1d,1a1d:1d"
STATUS          current
DESCRIPTION     
"A date-time specification.
field  octets  contents                  range
1      1-2   year*                     0..65536
2       3    month                     1..12
3       4    day                       1..31
4       5    hour                      0..23
5       6    minutes                   0..59
6       7    seconds                   0..60
(use 60 for leap-second)
7       8    deci-seconds              0..9
8       9    direction from UTC        '+' / '-'
9      10    hours from UTC*           0..13
10      11    minutes from UTC          0..59
* Notes:
- the value of year is in network-byte order
- daylight saving time in New Zealand is +13
For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be
displayed as:
1992-5-26,13:30:15.0,-4:0
Note that if only local time is known, then timezone
information (fields 8-10) is not present."
SYNTAX          OCTET STRING (SIZE(8 | 11))
StorageType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes the memory realization of a conceptual row.  A
row which is volatile(2) is lost upon reboot.  A row which

#----------------------------------- TEXTUAL-CONVENTION:  TDomain  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TDomain
TDomain ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Denotes a kind of transport service.
Some possible values, such as snmpUDPDomain, are defined in
the SNMPv2-TM MIB module.  Other possible values are defined
in other MIB modules."
REFERENCE       
"Denotes a kind of transport service.
Some possible values, such as snmpUDPDomain, are defined in
the SNMPv2-TM MIB module.  Other possible values are defined
in other MIB modules."
SYNTAX          OBJECT IDENTIFIER
TAddress ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Denotes a transport service address.
A TAddress value is always interpreted within the context of a
TDomain value.  Thus, each definition of a TDomain value must
be accompanied by a definition of a textual convention for use
with that TDomain.  Some possible textual conventions, such as
SnmpUDPAddress for snmpUDPDomain, are defined in the SNMPv2-TM
MIB module.  Other possible textual conventions are defined in
other MIB modules."
REFERENCE       
"Denotes a transport service address.
A TAddress value is always interpreted within the context of a
TDomain value.  Thus, each definition of a TDomain value must
be accompanied by a definition of a textual convention for use
with that TDomain.  Some possible textual conventions, such as
SnmpUDPAddress for snmpUDPDomain, are defined in the SNMPv2-TM
MIB module.  Other possible textual conventions are defined in
other MIB modules."
SYNTAX          OCTET STRING (SIZE(1..255))

#----------------------------------- TEXTUAL-CONVENTION:  EriMO  ---------------------------#
Archivo: ERICSSON-TC-MIB.mib
Nombre objeto: EriMO
EriMO ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"The 3GPP naming convention shall be used as the
format for the managed object parameter. Note
that the granularity MUST be sufficient to
guarantee unique alarm states and relevant
resource identification to the operator.
NOTE: The DN should be *relative* to the Managed
Element's *own* root."
REFERENCE
"3GPP TS 32.106-8 V3.2, Name convention for
Managed Objects"
SYNTAX OCTET STRING(SIZE(4..150))
EriPath ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"An abridged instance-identifier in YANG that references a
resource within the Managed Element.
For example:
/ex:system/server[ip='192.0.2.1'][port='80']
See: YANG module ericsson-yang-types.
See also: RFC 7950 Section 9.13.
NOTE: The granularity must be good enough to guarantee
unique alarm states and relevant resource identification
to the operator."
REFERENCE
"YANG module ericsson-yang-types;
RFC 7950 , The YANG 1.1 Data Modeling Language"
SYNTAX OCTET STRING(SIZE(4..150))

#----------------------------------- TEXTUAL-CONVENTION:  SnmpEngineID  ---------------------------#
Archivo: SNMP-FRAMEWORK-MIB
Nombre objeto: SnmpEngineID
SnmpEngineID ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"An SNMP engine's administratively-unique identifier.
Objects of this type are for identification, not for
addressing, even though it is possible that an
address may have been used in the generation of
a specific value.
The value for this object may not be all zeros or
all 'ff'H or the empty (zero length) string.
The initial value for this object may be configured
via an operator console entry or via an algorithmic
function.  In the latter case, the following
example algorithm is recommended.
In cases where there are multiple engines on the
same system, the use of this algorithm is NOT
appropriate, as it would result in all of those
engines ending up with the same ID value.
1) The very first bit is used to indicate how the
rest of the data is composed.
0 - as defined by enterprise using former methods
that existed before SNMPv3. See item 2 below.
1 - as defined by this architecture, see item 3
below.
Note that this allows existing uses of the
engineID (also known as AgentID [RFC1910]) to
co-exist with any new uses.
2) The snmpEngineID has a length of 12 octets.
The first four octets are set to the binary
equivalent of the agent's SNMP management
private enterprise number as assigned by the
Internet Assigned Numbers Authority (IANA).
For example, if Acme Networks has been assigned
{ enterprises 696 }, the first four octets would
be assigned '000002b8'H.
The remaining eight octets are determined via
one or more enterprise-specific methods. Such
methods must be designed so as to maximize the
possibility that the value of this object will
be unique in the agent's administrative domain.
For example, it may be the IP address of the SNMP
entity, or the MAC address of one of the
interfaces, with each address suitably padded
with random octets.  If multiple methods are
defined, then it is recommended that the first
octet indicate the method being used and the
remaining octets be a function of the method.
3) The length of the octet strings varies.
The first four octets are set to the binary
equivalent of the agent's SNMP management
private enterprise number as assigned by the
Internet Assigned Numbers Authority (IANA).
For example, if Acme Networks has been assigned
{ enterprises 696 }, the first four octets would
be assigned '000002b8'H.
The very first bit is set to 1. For example, the
above value for Acme Networks now changes to be
'800002b8'H.
The fifth octet indicates how the rest (6th and
following octets) are formatted. The values for
the fifth octet are:
0     - reserved, unused.
1     - IPv4 address (4 octets)
lowest non-special IP address
2     - IPv6 address (16 octets)
lowest non-special IP address
3     - MAC address (6 octets)
lowest IEEE MAC address, canonical
order
4     - Text, administratively assigned
Maximum remaining length 27
5     - Octets, administratively assigned
Maximum remaining length 27
6-127 - reserved, unused
127-255 - as defined by the enterprise
Maximum remaining length 27
"
SYNTAX          OCTET STRING (SIZE(5..32))
SnmpSecurityModel ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"An identifier that uniquely identifies a
securityModel of the Security Subsystem within the
SNMP Management Architecture.
The values for securityModel are allocated as
follows:
- The zero value is reserved.
- Values between 1 and 255, inclusive, are reserved
for standards-track Security Models and are
managed by the Internet Assigned Numbers Authority
(IANA).

#----------------------------------- TEXTUAL-CONVENTION:  SnmpMessageProcessingModel  ---------------------------#
Archivo: SNMP-FRAMEWORK-MIB
Nombre objeto: SnmpMessageProcessingModel
SnmpMessageProcessingModel ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"An identifier that uniquely identifies a Message
Processing Model of the Message Processing
Subsystem within a SNMP Management Architecture.
The values for messageProcessingModel are
allocated as follows:
- Values between 0 and 255, inclusive, are
reserved for standards-track Message Processing
Models and are managed by the Internet Assigned
Numbers Authority (IANA).
- Values greater than 255 are allocated to
enterprise-specific Message Processing Models.
An enterprise messageProcessingModel value is
defined to be:
enterpriseID * 256 +
messageProcessingModel within enterprise
For example, the fourth Message Processing Model
defined by the enterprise whose enterpriseID
is 1 would be 260.
This scheme for allocating messageProcessingModel
values allows for a maximum of 255 standards-
based Message Processing Models, and for a
maximum of 255 Message Processing Models per
enterprise.
It is believed that the assignment of new
messageProcessingModel values will be rare
in practice because the larger the number of
simultaneously utilized Message Processing Models,
the larger the chance that interoperability
will suffer. It is believed that such a range
will be sufficient.  In the unlikely event that
the standards committee finds this number to be
insufficient over time, an enterprise number
can be allocated to obtain an additional 256
possible values.
Note that the most significant bit must be zero;
hence, there are 23 bits allocated for various
organizations to design and define non-standard
messageProcessingModels.  This limits the ability
to define new proprietary implementations of
Message Processing Models to the first 8,388,608
enterprises.
It is worthwhile to note that, in its encoded
form, the messageProcessingModel value will
normally require only a single byte since, in
practice, the leftmost bits will be zero for
most messages and sign extension is suppressed
by the encoding rules.
As of this writing, there are several values of
messageProcessingModel defined for use with SNMP.
They are as follows:
0  reserved for SNMPv1
1  reserved for SNMPv2c
2  reserved for SNMPv2u and SNMPv2*
3  reserved for SNMPv3
"
SYNTAX          Integer32 (0..2147483647)
SnmpSecurityLevel ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A Level of Security at which SNMP messages can be
sent or with which operations are being processed;
in particular, one of:
noAuthNoPriv - without authentication and
without privacy,
authNoPriv   - with authentication but
without privacy,
authPriv     - with authentication and
with privacy.
These three values are ordered such that
noAuthNoPriv is less than authNoPriv and
authNoPriv is less than authPriv.
"
SYNTAX          INTEGER { noAuthNoPriv(1), authNoPriv(2), 

#----------------------------------- TEXTUAL-CONVENTION:  SnmpAdminString  ---------------------------#
Archivo: SNMP-FRAMEWORK-MIB
Nombre objeto: SnmpAdminString
SnmpAdminString ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"An octet string containing administrative
information, preferably in human-readable form.
To facilitate internationalization, this
information is represented using the ISO/IEC
IS 10646-1 character set, encoded as an octet
string using the UTF-8 transformation format
described in [RFC2279].
Since additional code points are added by
amendments to the 10646 standard from time
to time, implementations must be prepared to
encounter any code point from 0x00000000 to
0x7fffffff.  Byte sequences that do not
correspond to the valid UTF-8 encoding of a
code point or are outside this range are
prohibited.
The use of control codes should be avoided.
When it is necessary to represent a newline,
the control code sequence CR LF should be used.
The use of leading or trailing white space should
be avoided.
For code points not directly supported by user
interface hardware or software, an alternative
means of entry and display, such as hexadecimal,
may be provided.
For information encoded in 7-bit US-ASCII,
the UTF-8 encoding is identical to the
US-ASCII encoding.
UTF-8 may require multiple bytes to represent a
single character / code point; thus the length
of this object in octets may be different from
the number of characters encoded.  Similarly,
size constraints refer to the number of encoded
octets, not the number of characters represented
by an encoding.
Note that when this TC is used for an object that
is used or envisioned to be used as an index, then
a SIZE restriction MUST be specified so that the
number of sub-identifiers for any object instance
does not exceed the limit of 128, as defined by
[RFC1905].
Note that the size of an SnmpAdminString object is
measured in octets, not characters.
"
SYNTAX          OCTET STRING (SIZE(0..255))
snmpFrameworkAdmin OBJECT IDENTIFIER
::= { snmpFrameworkMIB 1 }

#----------------------------------- TEXTUAL-CONVENTION:  EriAlarmType  ---------------------------#
Archivo: ERICSSON-ALARM-TC-MIB.mib
Nombre objeto: EriAlarmType
EriAlarmType ::= TEXTUAL-CONVENTION
DISPLAY-HINT "d"
STATUS current
DESCRIPTION
"A unique identification of the fault, not
including the managed object. Alarm types are
used to identify if alarms indicate the same
problem or not, for lookup into external alarm
documentation, etc. A unique alarm type is
identified using the combination of two instances
of EriAlarmType. Different managed object
types and instances can share alarm types. But
if the same managed object reports the same alarm
type, it is to be considered to be the same alarm
state. The alarm type is a simplification of the
different X.733 and 3GPP alarm IRP alarm
correlation mechanisms based on EventType,
ProbableCause, SpecificProblem and
NotificationId."
SYNTAX Unsigned32
EriAlarmIndex ::= TEXTUAL-CONVENTION
DISPLAY-HINT "d"
STATUS current
DESCRIPTION
"Index used in the active alarm table. A row
shall never change its index during the lifetime
of the entry; for example renumbering entries is
not allowed when entries are deleted.
Renumbering after an agent restart is allowed.
Note that this index shall not be used to
identify alarms when performing
resynchronization, etc. The logical identity for
an alarm instance is the managed object and alarm
type."
SYNTAX Unsigned32
EriAdditionalText ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"The string used in additional text
notifications. This MUST contain enough
information for an operator to be able to
understand the problem. If this string contains
structure, this format should be clearly
documented for programs to be able to parse that
information. This is a small size range in order
to guarantee delivery of notifications without
fragmentation. There is a corresponding textual
convention, EriLargeAdditionalText, to be used
for scalar and columnar objects. The string
should adhere to the rules for SnmpAdminString of
SNMPv3 framework MIBs."
REFERENCE
"snmpFrameworkMIB in RFC 3411 defines
SnmpAdminString"
SYNTAX OCTET STRING(SIZE(4..256))

#----------------------------------- TEXTUAL-CONVENTION:  EriLargeAdditionalText  ---------------------------#
Archivo: ERICSSON-ALARM-TC-MIB.mib
Nombre objeto: EriLargeAdditionalText
EriLargeAdditionalText ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"The string used in additional text. This MUST
contain enough information for an operator to be
able to understand the problem. If this string
contains structure, this format should be clearly
documented for programs to be able to parse that
information. This is a large additional text to
be used in tables. There is a corresponding
textual convention to be used in alarm
notifications, EriAdditionalText. The string
should adhere to the rules for SnmpAdminString of
SNMPv3 framework MIBs."
REFERENCE
"snmpFrameworkMIB in RFC 3411 defines
SnmpAdminString"
SYNTAX OCTET STRING(SIZE(4..512))
EriAlarmSpecificProblem ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"Unique string for the Alarm Type. No different
alarm types may share specific problem. Specific
Problem and Alarm Type have a one-to-one
correspondance."
SYNTAX OCTET STRING(SIZE(4..64))

#----------------------------------- TEXTUAL-CONVENTION:  EriAlarmSequenceNumber  ---------------------------#
Archivo: ERICSSON-ALARM-TC-MIB.mib
Nombre objeto: EriAlarmSequenceNumber
EriAlarmSequenceNumber ::= TEXTUAL-CONVENTION
DISPLAY-HINT "d"
STATUS current
DESCRIPTION
"This is a monotonically increasing counter. It
is increased every time a notification is sent.
The value is NOT increased for heartbeat
notifications. It is carried as a varbind in the
alarm notifications as well as in the heartbeat
notifications. Management systems can use these
varbinds to detect lost notifications."
SYNTAX Unsigned32
EriAdditionalInfo ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"Additional Information, structured in a way that is
suitable for machine-to-machine communication.
Comprises a number of name=value pairs, separated by a
semicolon in the following format:
name1=value1;name2=value2;..
Allowed strings for use as 'name' are defined in
The Ericsson Architecture and updated upon internal
requests from Ericsson organizations.
This is a small size range in order to guarantee delivery
of notifications without fragmentation. There is a
corresponding textual convention, EriLargeAdditionalInfo,
to be used for scalar and columnar objects.
The string should adhere to the rules for SnmpAdminString
of SNMPv3 framework MIBs."
REFERENCE
"snmpFrameworkMIB in RFC 3411 defines
SnmpAdminString;
TEA (The Ericsson Architecture),

#----------------------------------- TEXTUAL-CONVENTION:  EriAppendedAdditionalInfo  ---------------------------#
Archivo: ERICSSON-ALARM-TC-MIB.mib
Nombre objeto: EriAppendedAdditionalInfo
EriAppendedAdditionalInfo ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"Used for spillover of Additional Info in the append trap."
REFERENCE
"snmpFrameworkMIB in RFC 3411 defines
SnmpAdminString;
TEA (The Ericsson Architecture),
Operation & Maintenance Architecture Principles, FAE 151 01."
SYNTAX OCTET STRING(SIZE(4..512))
EriLargeAdditionalInfo ::= TEXTUAL-CONVENTION
DISPLAY-HINT "1a"
STATUS current
DESCRIPTION
"Additional Information, structured in a way that is
suitable for machine-to-machine communication.
Comprises a number of name=value pairs, separated by a
semicolon in the following format:
name1=value1;name2=value2;..
Allowed strings for use as 'name' are defined in
The Ericsson Architecture and updated upon internal
requests from Ericsson organizations.
This is a large additional info to be used in tables.
There is a corresponding textual convention to be used
in alarm notifications, EriAdditionalInfo.
The string should adhere to the rules for SnmpAdminString
of SNMPv3 framework MIBs."
REFERENCE
"snmpFrameworkMIB in RFC 3411 defines
SnmpAdminString;
TEA (The Ericsson Architecture),

#----------------------------------- TEXTUAL-CONVENTION:  EriAlarmRecordType  ---------------------------#
Archivo: ERICSSON-ALARM-TC-MIB.mib
Nombre objeto: EriAlarmRecordType
EriAlarmRecordType ::= TEXTUAL-CONVENTION
STATUS current
DESCRIPTION
"This defines the alarm record type that is
being reported in an alarm notification."
SYNTAX INTEGER {
alarmNew(0),

#----------------------------------- TEXTUAL-CONVENTION:  SnmpTagValue  ---------------------------#
Archivo: SNMP-TARGET-MIB
Nombre objeto: SnmpTagValue
SnmpTagValue ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"An octet string containing a tag value.
Tag values are preferably in human-readable form.
To facilitate internationalization, this information
is represented using the ISO/IEC IS 10646-1 character
set, encoded as an octet string using the UTF-8
character encoding scheme described in RFC 2279.
Since additional code points are added by amendments
to the 10646 standard from time to time,
implementations must be prepared to encounter any code
point from 0x00000000 to 0x7fffffff.
The use of control codes should be avoided, and certain
control codes are not allowed as described below.
For code points not directly supported by user
interface hardware or software, an alternative means
of entry and display, such as hexadecimal, may be
provided.
For information encoded in 7-bit US-ASCII, the UTF-8
representation is identical to the US-ASCII encoding.
Note that when this TC is used for an object that
is used or envisioned to be used as an index, then a
SIZE restriction must be specified so that the number
of sub-identifiers for any object instance does not
exceed the limit of 128, as defined by [RFC1905].
An object of this type contains a single tag value
which is used to select a set of entries in a table.
A tag value is an arbitrary string of octets, but
may not contain a delimiter character.  Delimiter
characters are defined to be one of the following:
-  An ASCII space character (0x20).
-  An ASCII TAB character (0x09).
-  An ASCII carriage return (CR) character (0x0D).
-  An ASCII line feed (LF) character (0x0B).
Delimiter characters are used to separate tag values
in a tag list.  An object of this type may only
contain a single tag value, and so delimiter
characters are not allowed in a value of this type.
Some examples of valid tag values are:
- 'acme'
- 'router'
- 'host'
The use of a tag value to select table entries is
application and MIB specific."
SYNTAX          OCTET STRING (SIZE(0..255))
SnmpTagList ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"An octet string containing a list of tag values.
Tag values are preferably in human-readable form.
To facilitate internationalization, this information
is represented using the ISO/IEC IS 10646-1 character
set, encoded as an octet string using the UTF-8
character encoding scheme described in RFC 2279.
Since additional code points are added by amendments
to the 10646 standard from time to time,
implementations must be prepared to encounter any code
point from 0x00000000 to 0x7fffffff.
The use of control codes should be avoided, except as
described below.
For code points not directly supported by user
interface hardware or software, an alternative means
of entry and display, such as hexadecimal, may be
provided.
For information encoded in 7-bit US-ASCII, the UTF-8
representation is identical to the US-ASCII encoding.
An object of this type contains a list of tag values
which are used to select a set of entries in a table.
A tag value is an arbitrary string of octets, but
may not contain a delimiter character.  Delimiter
characters are defined to be one of the following:
-  An ASCII space character (0x20).

#----------------------------------- TEXTUAL-CONVENTION:  EriProbableCause  ---------------------------#
Archivo: ERICSSON-ALARM-PC-MIB.mib
Nombre objeto: EriProbableCause
EriProbableCause ::= TEXTUAL-CONVENTION
STATUS current
DESCRIPTION
"Probable cause as specified in the following
specifications:
- 3GPP TS 32.111-2 V14.0.0 (2017-03)
- 3GPP TS 32.111-3 V9.1.0 (2012-09)
Also referenced from the above specs are ITU
recommendations M.3100, X.733 and X.736, as well
as ETSI recommendation GSM 12.11, now more
generically referred to as 'Wireless Systems' in
the 3GPP specs above.
This list is updated upon internal requests from
Ericsson organizations. We do not use the
standard probable cause TC, IANAItuProbableCause
from ITU-ALARM-MIB since we have no change
control over that document.
The initial list was created by merging the
existing enumerations used within Ericsson.
Should we discover that there are conflicts in
the semantics associated with a particular value,
one of them will be moved, as it is the
identifier which is important, not the integer
value."
SYNTAX INTEGER {
-- The following values are defined in M.3100 (0795)

