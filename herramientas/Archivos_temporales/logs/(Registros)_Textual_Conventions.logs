#----------------------------------- TEXTUAL-CONVENTION:  DisplayString  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: DisplayString
DisplayString ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"Represents textual information taken from the NVT ASCII
character set, as defined in pages 4, 10-11 of RFC 854.
To summarize RFC 854, the NVT ASCII repertoire specifies:
- the use of character codes 0-127 (decimal)
- the graphics characters (32-126) are interpreted as
US ASCII
- NUL, LF, CR, BEL, BS, HT, VT and FF have the special
meanings specified in RFC 854
- the other 25 codes have no standard interpretation
- the sequence 'CR LF' means newline
- the sequence 'CR NUL' means carriage-return
- an 'LF' not preceded by a 'CR' means moving to the
same column on the next line.
- the sequence 'CR x' for any x other than LF or NUL is
illegal.  (Note that this also means that a string may
end with either 'CR LF' or 'CR NUL', but not with CR.)
Any object defined using this syntax may not exceed 255
characters in length."
SYNTAX          OCTET STRING (SIZE(0..255))
PhysAddress ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1x:"
STATUS          current
DESCRIPTION     
"Represents media- or physical-level addresses."
SYNTAX          OCTET STRING
MacAddress ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1x:"
STATUS          current
DESCRIPTION     
"Represents an 802 MAC address represented in the
`canonical' order defined by IEEE 802.1a, i.e., as if it
were transmitted least significant bit first, even though
802.5 (in contrast to other 802.x protocols) requires MAC

#----------------------------------- TEXTUAL-CONVENTION:  TruthValue  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TruthValue
TruthValue ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents a boolean value."
SYNTAX          INTEGER { true(1), false(2) }
TestAndIncr ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents integer-valued information used for atomic
operations.  When the management protocol is used to specify
that an object instance having this syntax is to be
modified, the new value supplied via the management protocol
must precisely match the value presently held by the
instance.  If not, the management protocol set operation
fails with an error of `inconsistentValue'.  Otherwise, if
the current value is the maximum value of 2^31-1 (2147483647
decimal), then the value held by the instance is wrapped to

#----------------------------------- TEXTUAL-CONVENTION:  AutonomousType  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: AutonomousType
AutonomousType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents an independently extensible type identification
value.  It may, for example, indicate a particular sub-tree
with further MIB definitions, or define a particular type of
protocol or hardware."
SYNTAX          OBJECT IDENTIFIER
InstancePointer ::= TEXTUAL-CONVENTION
STATUS          obsolete
DESCRIPTION     
"A pointer to either a specific instance of a MIB object or
a conceptual row of a MIB table in the managed device.  In
the latter case, by convention, it is the name of the
particular instance of the first accessible columnar object
in the conceptual row.
The two uses of this textual convention are replaced by
VariablePointer and RowPointer, respectively."
SYNTAX          OBJECT IDENTIFIER
VariablePointer ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A pointer to a specific object instance.  For example,
sysContact.0 or ifInOctets.3."
SYNTAX          OBJECT IDENTIFIER
RowPointer ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents a pointer to a conceptual row.  The value is the
name of the instance of the first accessible columnar object
in the conceptual row.
For example, ifIndex.3 would point to the 3rd row in the
ifTable (note that if ifIndex were not-accessible, then
ifDescr.3 would be used instead)."

#----------------------------------- TEXTUAL-CONVENTION:  RowStatus  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: RowStatus
RowStatus ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"The RowStatus textual convention is used to manage the
creation and deletion of conceptual rows, and is used as the
value of the SYNTAX clause for the status column of a
conceptual row (as described in Section 7.7.1 of [2].)

#----------------------------------- TEXTUAL-CONVENTION:  TimeStamp  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TimeStamp
TimeStamp ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"The value of the sysUpTime object at which a specific
occurrence happened.  The specific occurrence must be
defined in the description of any object defined using this
type.
If sysUpTime is reset to zero as a result of a re-
initialization of the network management (sub)system, then
the values of all TimeStamp objects are also reset.
However, after approximately 497 days without a re-
initialization, the sysUpTime object will reach 2^^32-1 and
then increment around to zero; in this case, existing values
of TimeStamp objects do not change.  This can lead to
ambiguities in the value of TimeStamp objects."
SYNTAX          TimeTicks
TimeInterval ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A period of time, measured in units of 0.01 seconds."
SYNTAX          Integer32 (0..2147483647)

#----------------------------------- TEXTUAL-CONVENTION:  DateAndTime  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: DateAndTime
DateAndTime ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "2d-1d-1d,1d:1d:1d.1d,1a1d:1d"
STATUS          current
DESCRIPTION     
"A date-time specification.
field  octets  contents                  range
1      1-2   year*                     0..65536
2       3    month                     1..12
3       4    day                       1..31
4       5    hour                      0..23
5       6    minutes                   0..59
6       7    seconds                   0..60
(use 60 for leap-second)
7       8    deci-seconds              0..9
8       9    direction from UTC        '+' / '-'
9      10    hours from UTC*           0..13
10      11    minutes from UTC          0..59
* Notes:
- the value of year is in network-byte order
- daylight saving time in New Zealand is +13
For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be
displayed as:
1992-5-26,13:30:15.0,-4:0
Note that if only local time is known, then timezone
information (fields 8-10) is not present."
SYNTAX          OCTET STRING (SIZE(8 | 11))
StorageType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes the memory realization of a conceptual row.  A
row which is volatile(2) is lost upon reboot.  A row which

#----------------------------------- TEXTUAL-CONVENTION:  TDomain  ---------------------------#
Archivo: SNMPv2-TC
Nombre objeto: TDomain
TDomain ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Denotes a kind of transport service.
Some possible values, such as snmpUDPDomain, are defined in
the SNMPv2-TM MIB module.  Other possible values are defined
in other MIB modules."
REFERENCE       
"Denotes a kind of transport service.
Some possible values, such as snmpUDPDomain, are defined in
the SNMPv2-TM MIB module.  Other possible values are defined
in other MIB modules."
SYNTAX          OBJECT IDENTIFIER
TAddress ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Denotes a transport service address.
A TAddress value is always interpreted within the context of a
TDomain value.  Thus, each definition of a TDomain value must
be accompanied by a definition of a textual convention for use
with that TDomain.  Some possible textual conventions, such as
SnmpUDPAddress for snmpUDPDomain, are defined in the SNMPv2-TM
MIB module.  Other possible textual conventions are defined in
other MIB modules."
REFERENCE       
"Denotes a transport service address.
A TAddress value is always interpreted within the context of a
TDomain value.  Thus, each definition of a TDomain value must
be accompanied by a definition of a textual convention for use
with that TDomain.  Some possible textual conventions, such as
SnmpUDPAddress for snmpUDPDomain, are defined in the SNMPv2-TM
MIB module.  Other possible textual conventions are defined in
other MIB modules."
SYNTAX          OCTET STRING (SIZE(1..255))

#----------------------------------- TEXTUAL-CONVENTION:  InetAddressType  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAddressType
InetAddressType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A value that represents a type of Internet address.
unknown(0)  An unknown address type.  This value MUST
be used if the value of the corresponding
InetAddress object is a zero-length string.
It may also be used to indicate an IP address
that is not in one of the formats defined
below.
ipv4(1)     An IPv4 address as defined by the
InetAddressIPv4 textual convention.
ipv6(2)     An IPv6 address as defined by the
InetAddressIPv6 textual convention.
ipv4z(3)    A non-global IPv4 address including a zone
index as defined by the InetAddressIPv4z
textual convention.
ipv6z(4)    A non-global IPv6 address including a zone
index as defined by the InetAddressIPv6z
textual convention.
dns(16)     A DNS domain name as defined by the
InetAddressDNS textual convention.
Each definition of a concrete InetAddressType value must be
accompanied by a definition of a textual convention for use
with that InetAddressType.
To support future extensions, the InetAddressType textual
convention SHOULD NOT be sub-typed in object type definitions.
It MAY be sub-typed in compliance statements in order to
require only a subset of these address types for a compliant
implementation.
Implementations must ensure that InetAddressType objects
and any dependent objects (e.g., InetAddress objects) are
consistent.  An inconsistentValue error must be generated
if an attempt to change an InetAddressType object would,
for example, lead to an undefined InetAddress value.  In
particular, InetAddressType/InetAddress pairs must be
changed together if the address type changes (e.g., from
ipv6(2) to ipv4(1))."
SYNTAX          INTEGER { unknown(0), ipv4(1), ipv6(2), ipv4z(3), 
ipv6z(4), dns(16) }

#----------------------------------- TEXTUAL-CONVENTION:  InetAddress  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAddress
InetAddress ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Denotes a generic Internet address.
An InetAddress value is always interpreted within the context
of an InetAddressType value.  Every usage of the InetAddress
textual convention is required to specify the InetAddressType
object that provides the context.  It is suggested that the
InetAddressType object be logically registered before the
object(s) that use the InetAddress textual convention, if
they appear in the same logical row.
The value of an InetAddress object must always be
consistent with the value of the associated InetAddressType
object.  Attempts to set an InetAddress object to a value
inconsistent with the associated InetAddressType
must fail with an inconsistentValue error.
When this textual convention is used as the syntax of an
index object, there may be issues with the limit of 128
sub-identifiers specified in SMIv2, STD 58.  In this case,
the object definition MUST include a 'SIZE' clause to
limit the number of potential instance sub-identifiers;
otherwise the applicable constraints MUST be stated in
the appropriate conceptual row DESCRIPTION clauses, or
in the surrounding documentation if there is no single
DESCRIPTION clause that is appropriate."
SYNTAX          OCTET STRING (SIZE(0..255))
InetAddressIPv4 ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1d.1d.1d.1d"
STATUS          current
DESCRIPTION     
"Represents an IPv4 network address:
Octets   Contents         Encoding
1-4     IPv4 address     network-byte order
The corresponding InetAddressType value is ipv4(1).

#----------------------------------- TEXTUAL-CONVENTION:  InetAddressIPv6  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAddressIPv6
InetAddressIPv6 ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "2x:2x:2x:2x:2x:2x:2x:2x"
STATUS          current
DESCRIPTION     
"Represents an IPv6 network address:
Octets   Contents         Encoding
1-16    IPv6 address     network-byte order
The corresponding InetAddressType value is ipv6(2).
This textual convention SHOULD NOT be used directly in object
definitions, as it restricts addresses to a specific format.
However, if it is used, it MAY be used either on its own or in
conjunction with InetAddressType, as a pair."
SYNTAX          OCTET STRING (SIZE(16))
InetAddressIPv4z ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "1d.1d.1d.1d%4d"
STATUS          current
DESCRIPTION     
"Represents a non-global IPv4 network address, together
with its zone index:
Octets   Contents         Encoding
1-4     IPv4 address     network-byte order
5-8     zone index       network-byte order
The corresponding InetAddressType value is ipv4z(3).

#----------------------------------- TEXTUAL-CONVENTION:  InetAddressIPv6z  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAddressIPv6z
InetAddressIPv6z ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "2x:2x:2x:2x:2x:2x:2x:2x%4d"
STATUS          current
DESCRIPTION     
"Represents a non-global IPv6 network address, together
with its zone index:
Octets   Contents         Encoding
1-16    IPv6 address     network-byte order
17-20    zone index       network-byte order
The corresponding InetAddressType value is ipv6z(4).
The zone index (bytes 17-20) is used to disambiguate
identical address values on nodes that have interfaces
attached to different zones of the same scope.  The zone index
may contain the special value 0, which refers to the default
zone for each scope.
This textual convention SHOULD NOT be used directly in object
definitions, as it restricts addresses to a specific format.
However, if it is used, it MAY be used either on its own or in
conjunction with InetAddressType, as a pair."
SYNTAX          OCTET STRING (SIZE(20))
InetAddressDNS ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "255a"
STATUS          current
DESCRIPTION     
"Represents a DNS domain name.  The name SHOULD be fully
qualified whenever possible.
The corresponding InetAddressType is dns(16).

#----------------------------------- TEXTUAL-CONVENTION:  InetAddressPrefixLength  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAddressPrefixLength
InetAddressPrefixLength ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "d"
STATUS          current
DESCRIPTION     
"Denotes the length of a generic Internet network address
prefix.  A value of n corresponds to an IP address mask
that has n contiguous 1-bits from the most significant
bit (MSB), with all other bits set to 0.
An InetAddressPrefixLength value is always interpreted within
the context of an InetAddressType value.  Every usage of the
InetAddressPrefixLength textual convention is required to
specify the InetAddressType object that provides the
context.  It is suggested that the InetAddressType object be
logically registered before the object(s) that use the
InetAddressPrefixLength textual convention, if they appear
in the same logical row.
InetAddressPrefixLength values larger than
the maximum length of an IP address for a specific
InetAddressType are treated as the maximum significant
value applicable for the InetAddressType.  The maximum
significant value is 32 for the InetAddressType
'ipv4(1)' and 'ipv4z(3)' and 128 for the InetAddressType
'ipv6(2)' and 'ipv6z(4)'.  The maximum significant value
for the InetAddressType 'dns(16)' is 0.
The value zero is object-specific and must be defined as
part of the description of any object that uses this
syntax.  Examples of the usage of zero might include
situations where the Internet network address prefix
is unknown or does not apply.
The upper bound of the prefix length has been chosen to
be consistent with the maximum size of an InetAddress."
SYNTAX          Unsigned32 (0..2040)
InetPortNumber ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "d"
STATUS          current
DESCRIPTION     
"Represents a 16 bit port number of an Internet transport
layer protocol.  Port numbers are assigned by IANA.  A
current list of all assignments is available from
<http://www.iana.org/>.
The value zero is object-specific and must be defined as
part of the description of any object that uses this
syntax.  Examples of the usage of zero might include
situations where a port number is unknown, or when the
value zero is used as a wildcard in a filter."
REFERENCE       
"Represents a 16 bit port number of an Internet transport
layer protocol.  Port numbers are assigned by IANA.  A
current list of all assignments is available from
<http://www.iana.org/>.
The value zero is object-specific and must be defined as
part of the description of any object that uses this
syntax.  Examples of the usage of zero might include
situations where a port number is unknown, or when the
value zero is used as a wildcard in a filter."
SYNTAX          Unsigned32 (0..65535)

#----------------------------------- TEXTUAL-CONVENTION:  InetAutonomousSystemNumber  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetAutonomousSystemNumber
InetAutonomousSystemNumber ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "d"
STATUS          current
DESCRIPTION     
"Represents an autonomous system number that identifies an
Autonomous System (AS).  An AS is a set of routers under a
single technical administration, using an interior gateway
protocol and common metrics to route packets within the AS,
and using an exterior gateway protocol to route packets to
other ASes'.  IANA maintains the AS number space and has
delegated large parts to the regional registries.
Autonomous system numbers are currently limited to 16 bits
(0..65535).  There is, however, work in progress to enlarge the
autonomous system number space to 32 bits.  Therefore, this
textual convention uses an Unsigned32 value without a
range restriction in order to support a larger autonomous
system number space."
REFERENCE       
"Represents an autonomous system number that identifies an
Autonomous System (AS).  An AS is a set of routers under a
single technical administration, using an interior gateway
protocol and common metrics to route packets within the AS,
and using an exterior gateway protocol to route packets to
other ASes'.  IANA maintains the AS number space and has
delegated large parts to the regional registries.
Autonomous system numbers are currently limited to 16 bits
(0..65535).  There is, however, work in progress to enlarge the
autonomous system number space to 32 bits.  Therefore, this
textual convention uses an Unsigned32 value without a
range restriction in order to support a larger autonomous
system number space."
SYNTAX          Unsigned32
InetScopeType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Represents a scope type.  This textual convention can be used
in cases where a MIB has to represent different scope types
and there is no context information, such as an InetAddress
object, that implicitly defines the scope type.
Note that not all possible values have been assigned yet, but
they may be assigned in future revisions of this specification.
Applications should therefore be able to deal with values
not yet assigned."
REFERENCE       
"Represents a scope type.  This textual convention can be used
in cases where a MIB has to represent different scope types
and there is no context information, such as an InetAddress
object, that implicitly defines the scope type.
Note that not all possible values have been assigned yet, but
they may be assigned in future revisions of this specification.
Applications should therefore be able to deal with values
not yet assigned."
SYNTAX          INTEGER { interfaceLocal(1), linkLocal(2), 

#----------------------------------- TEXTUAL-CONVENTION:  InetZoneIndex  ---------------------------#
Archivo: INET-ADDRESS-MIB
Nombre objeto: InetZoneIndex
InetZoneIndex ::= TEXTUAL-CONVENTION
DISPLAY-HINT    "d"
STATUS          current
DESCRIPTION     
"A zone index identifies an instance of a zone of a
specific scope.
The zone index MUST disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index (ifIndex as defined in the
IF-MIB) of the interface on which the address is configured.
The zone index may contain the special value 0, which refers
to the default zone.  The default zone may be used in cases
where the valid zone index is not known (e.g., when a
management application has to write a link-local IPv6
address without knowing the interface index value).  The
default zone SHOULD NOT be used as an easy way out in
cases where the zone index for a non-global IPv6 address
is known."
REFERENCE       
"A zone index identifies an instance of a zone of a
specific scope.
The zone index MUST disambiguate identical address
values.  For link-local addresses, the zone index will
typically be the interface index (ifIndex as defined in the
IF-MIB) of the interface on which the address is configured.
The zone index may contain the special value 0, which refers
to the default zone.  The default zone may be used in cases
where the valid zone index is not known (e.g., when a
management application has to write a link-local IPv6
address without knowing the interface index value).  The
default zone SHOULD NOT be used as an easy way out in
cases where the zone index for a non-global IPv6 address
is known."
SYNTAX          Unsigned32
InetVersion ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"A value representing a version of the IP protocol.
unknown(0)  An unknown or unspecified version of the IP

#----------------------------------- TEXTUAL-CONVENTION:  SonusDSIAlarmStatus  ---------------------------#
Archivo: SONUS-DATASTREAM-INTEGRATOR-MIB
Nombre objeto: SonusDSIAlarmStatus
SonusDSIAlarmStatus ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes whether alarm is set or clear."
SYNTAX          INTEGER { clear(1), set(2) }
SonusDSIClusterName ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes which dsi cluster raised this alarm."
SYNTAX          DisplayString (SIZE(0..64))

#----------------------------------- TEXTUAL-CONVENTION:  SonusDSINodeType  ---------------------------#
Archivo: SONUS-DATASTREAM-INTEGRATOR-MIB
Nombre objeto: SonusDSINodeType
SonusDSINodeType ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes which dsi cluster raised this alarm."
SYNTAX          INTEGER { none(0), mnode(1), cnode(2) }
SonusDSIConnStatus ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes the connection status."
SYNTAX          INTEGER { up(1), down(2) }

#----------------------------------- TEXTUAL-CONVENTION:  SonusDSIProcessName  ---------------------------#
Archivo: SONUS-DATASTREAM-INTEGRATOR-MIB
Nombre objeto: SonusDSIProcessName
SonusDSIProcessName ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Describes which process this alarm relates to."
SYNTAX          DisplayString (SIZE(0..64))
sonusDSIMIBObjects OBJECT IDENTIFIER
::= { sonusDSIMIB 1 }

#----------------------------------- TEXTUAL-CONVENTION:  KBytes  ---------------------------#
Archivo: HOST-RESOURCES-MIB
Nombre objeto: KBytes
KBytes ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"Storage size, expressed in units of 1024 bytes."
SYNTAX          Integer32 (0..2147483647)
ProductID ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"This textual convention is intended to identify the
manufacturer, model, and version of a specific
hardware or software product.  It is suggested that
these OBJECT IDENTIFIERs are allocated such that all
products from a particular manufacturer are registered
under a subtree distinct to that manufacturer.  In
addition, all versions of a product should be
registered under a subtree distinct to that product.
With this strategy, a management station may uniquely
determine the manufacturer and/or model of a product
whose productID is unknown to the management station.
Objects of this type may be useful for inventory
purposes or for automatically detecting
incompatibilities or version mismatches between
various hardware and software components on a system.
For example, the product ID for the ACME 4860 66MHz
clock doubled processor might be:
enterprises.acme.acmeProcessors.a4860DX2.MHz66
A software product might be registered as:
enterprises.acme.acmeOperatingSystems.acmeDOS.six(6).one(1)

#----------------------------------- TEXTUAL-CONVENTION:  InternationalDisplayString  ---------------------------#
Archivo: HOST-RESOURCES-MIB
Nombre objeto: InternationalDisplayString
InternationalDisplayString ::= TEXTUAL-CONVENTION
STATUS          current
DESCRIPTION     
"This data type is used to model textual information
in some character set.  A network management station
should use a local algorithm to determine which
character set is in use and how it should be
displayed.  Note that this character set may be
encoded with more than one octet per symbol, but will
most often be NVT ASCII. When a size clause is
specified for an object of this type, the size refers
to the length in octets, not the number of symbols."
SYNTAX          OCTET STRING
host OBJECT IDENTIFIER
::= { mib-2 25 }

